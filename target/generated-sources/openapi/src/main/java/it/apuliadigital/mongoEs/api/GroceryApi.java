/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.apuliadigital.mongoEs.api;

import it.apuliadigital.mongoEs.model.GroceryItemDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-16T16:52:35.748068+02:00[Europe/Rome]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "grocery", description = "the grocery API")
public interface GroceryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /grocery/ : Create a new grocery
     * Add a new grocery to the database
     *
     * @param groceryItemDTO Data for the new grocery (required)
     * @return Artist created (status code 201)
     *         or Invalid input (status code 400)
     *         or Grocery not found (status code 404)
     */
    @Operation(
        operationId = "createGrocery",
        summary = "Create a new grocery",
        description = "Add a new grocery to the database",
        tags = { "grocery" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Artist created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroceryItemDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Grocery not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grocery/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GroceryItemDTO> createGrocery(
        @Parameter(name = "GroceryItemDTO", description = "Data for the new grocery", required = true) @Valid @RequestBody GroceryItemDTO groceryItemDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 10, \"nome\" : \"Prodotto\", \"id\" : \"1\", \"category\" : \"Categoria\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /grocery/{id} : Delete grocery by id
     * Delete a grocery by id
     *
     * @param id  (required)
     * @return Operation successful (status code 200)
     *         or Invalid input (status code 400)
     *         or No artists found (status code 404)
     */
    @Operation(
        operationId = "deleteGroceryById",
        summary = "Delete grocery by id",
        description = "Delete a grocery by id",
        tags = { "grocery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "No artists found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/grocery/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Boolean> deleteGroceryById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grocery/ : List all grocery
     * Returns a list of all grocery
     *
     * @return Operation successful (status code 200)
     *         or No grocery found (status code 404)
     */
    @Operation(
        operationId = "getAllGrocery",
        summary = "List all grocery",
        description = "Returns a list of all grocery",
        tags = { "grocery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroceryItemDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No grocery found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grocery/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GroceryItemDTO>> getAllGrocery(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"quantity\" : 10, \"nome\" : \"Prodotto\", \"id\" : \"1\", \"category\" : \"Categoria\" }, { \"quantity\" : 10, \"nome\" : \"Prodotto\", \"id\" : \"1\", \"category\" : \"Categoria\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grocery/{id} : Get grocery by id
     * Return a grocery by id
     *
     * @param id  (required)
     * @return Operation successful (status code 200)
     *         or Invalid input (status code 400)
     *         or No artists found (status code 404)
     */
    @Operation(
        operationId = "getGroceryById",
        summary = "Get grocery by id",
        description = "Return a grocery by id",
        tags = { "grocery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroceryItemDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "No artists found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grocery/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GroceryItemDTO> getGroceryById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 10, \"nome\" : \"Prodotto\", \"id\" : \"1\", \"category\" : \"Categoria\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /grocery/{id} : update a  grocery
     * update a  grocery to the database
     *
     * @param id  (required)
     * @param groceryItemDTO Data for the update grocery (required)
     * @return Artist created (status code 201)
     *         or Invalid input (status code 400)
     *         or Grocery not found (status code 404)
     */
    @Operation(
        operationId = "updateGrocery",
        summary = "update a  grocery",
        description = "update a  grocery to the database",
        tags = { "grocery" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Artist created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroceryItemDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Grocery not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/grocery/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GroceryItemDTO> updateGrocery(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "GroceryItemDTO", description = "Data for the update grocery", required = true) @Valid @RequestBody GroceryItemDTO groceryItemDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 10, \"nome\" : \"Prodotto\", \"id\" : \"1\", \"category\" : \"Categoria\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
